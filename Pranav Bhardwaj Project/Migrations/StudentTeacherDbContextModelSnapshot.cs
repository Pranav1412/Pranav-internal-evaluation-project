// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentsComputerCentre.Data;

#nullable disable

namespace StudentsComputerCentre.Migrations
{
    [DbContext(typeof(StudentTeacherDbContext))]
    partial class StudentTeacherDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentsComputerCentre.Models.Domain.CourseDetails", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fees")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("StudentsComputerCentre.Models.Domain.StudentDetails", b =>
                {
                    b.Property<int>("iRoll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iRoll"));

                    b.Property<int>("CourseDetailsCourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeesPaid")
                        .HasColumnType("int");

                    b.Property<int>("StudentsiRoll")
                        .HasColumnType("int");

                    b.HasKey("iRoll");

                    b.HasIndex("CourseDetailsCourseId");

                    b.HasIndex("StudentsiRoll");

                    b.ToTable("studentDetails");
                });

            modelBuilder.Entity("StudentsComputerCentre.Models.Domain.Students", b =>
                {
                    b.Property<int>("iRoll")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("iRoll"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("iRoll");

                    b.ToTable("studentes");
                });

            modelBuilder.Entity("StudentsComputerCentre.Models.Domain.Teachers", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeacherId"));

                    b.Property<int>("CourseDetailsCourseId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeacherId");

                    b.HasIndex("CourseDetailsCourseId");

                    b.ToTable("teacherses");
                });

            modelBuilder.Entity("StudentsComputerCentre.Models.Domain.StudentDetails", b =>
                {
                    b.HasOne("StudentsComputerCentre.Models.Domain.CourseDetails", "CourseDetails")
                        .WithMany()
                        .HasForeignKey("CourseDetailsCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentsComputerCentre.Models.Domain.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentsiRoll")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseDetails");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentsComputerCentre.Models.Domain.Teachers", b =>
                {
                    b.HasOne("StudentsComputerCentre.Models.Domain.CourseDetails", "CourseDetails")
                        .WithMany()
                        .HasForeignKey("CourseDetailsCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
